/**
 * @(#)CGameMain.java
 *
 *
 * @author 
 * @version 1.00
 */


import FunCode.JSystem;
import FunCode.JSprite;
import FunCode.JStaticSprite;
import FunCode.JAnimateSprite;
import FunCode.JTextSprite;
import FunCode.JEffect;
import FunCode.JSound;


public class CGameMain 
{
	public static CGameMain g_GameMain;				// 本类的唯一实例
	public int				m_iGameState =	0;		// 游戏状态，0 -- 游戏结束等待开始状态；1 -- 按下空格键开始，初始化游戏；2 -- 游戏进行中
	private JSprite A1;
	
	static
	{
		g_GameMain = new CGameMain();
	}
	
	//=============================================================================
	//
	// 构造方法
    public CGameMain() 
    {
    	m_iGameState = 1;
    	JSprite A1 = new JSprite("A1");
    }
    
    //=============================================================================
    // 游戏主循环，此函数将被不停的调用，引擎每刷新一次屏幕，此函数即被调用一次
	// 用以处理游戏的开始、进行中、结束等各种状态. 
	// 函数参数fDeltaTime : 上次调用本函数到此次调用本函数的时间间隔，单位：秒
    public void GameMainLoop( float fDeltaTime )
    {
    	switch( m_iGameState )
		{
			// 初始化游戏，清空上一局相关数据
		case 1:
			{
				GameInit();
				m_iGameState	=	2; // 初始化之后，将游戏状态设置为进行中
			}
			break;
	
			// 游戏进行中，处理各种游戏逻辑
		case 2:
			{
				// 修改此处游戏循环条件，完成正确游戏逻辑
				if( true )
				{
					GameRun( fDeltaTime );
				}
				else
				{
					// 游戏结束。调用游戏结算函数，并把游戏状态修改为结束状态
					m_iGameState	=	0;
					GameEnd();
				}
			}
			break;
			// 游戏结束/等待按空格键开始
		case 0:
		default:
			break;
		};
    }
    
	//==============================================================================
	//
	// 每局开始前进行初始化，清空上一局相关数据
	public void	GameInit()
	{
	}
	
	//==============================================================================
	//
	// 每局游戏进行中
	public void	GameRun( float fDeltaTime )
	{
		A1.SpriteRotateTo(180,10,false);
	}
	
	//==============================================================================
	//
	// 本局游戏结束
	public void	GameEnd()
	{
	}
    
    // dOnMouseMove：鼠标移动后将被调用的方法
	// 参数 fMouseX, fMouseY：为鼠标当前坐标
	//
    public void	OnMouseMove( float fMouseX, float fMouseY )
	{
	}
	
	// dOnMouseClick：鼠标按下后将被调用的方法
	// 参数 iMouseType：鼠标按键值，见 enum MouseTypes 定义
	// 参数 fMouseX, fMouseY：为鼠标当前坐标
	//	
	public void	OnMouseClick( int iMouseType, float fMouseX, float fMouseY )
	{		
	}

	// dOnMouseUp：鼠标弹起后将被调用的方法
	// 参数 iMouseType：鼠标按键值，见 enum MouseTypes 定义
	// 参数 fMouseX, fMouseY：为鼠标当前坐标
	//	
	public void	OnMouseUp( int iMouseType, float fMouseX, float fMouseY )
	{		
	}
    
	// dOnKeyDown：键盘被按下后将被调用的方法
	// 参数 iKey：被按下的键，值见 enum KeyCodes 宏定义
	// 参数 bAltPress, bShiftPress，bCtrlPress：键盘上的功能键Alt，Ctrl，Shift当前是否也处于按下状态
	//    
    public void	OnKeyDown( int iKey, boolean bAltPress, boolean bShiftPress, boolean bCtrlPress )
    {
    }
    
	// dOnKeyUp：键盘按键弹起后将被调用的方法
	// 参数 iKey：弹起的键，值见 enum KeyCodes 宏定义
	//    
	public void	OnKeyUp( int iKey )
	{
	}
	
	// dOnSpriteColSprite：精灵与精灵碰撞后将被调用的方法
	// 精灵之间要产生碰撞，必须在编辑器或者代码里设置精灵发送及接受碰撞
	// 参数 szSrcName：发起碰撞的精灵名字
	// 参数 szTarName：被碰撞的精灵名字
	//	
	public void	OnSpriteColSprite( String szSrcName, String szTarName )
	{
	}
	
	// dOnSpriteColWorldLimit：精灵与世界边界碰撞后将被调用的方法
	// 精灵之间要产生碰撞，必须在编辑器或者代码里设置精灵的世界边界限制
	// 参数 szName：碰撞到边界的精灵名字
	// 参数 iColSide：碰撞到的边界 0 左边，1 右边，2 上边，3 下边
	//	
	public void	OnSpriteColWorldLimit( String szName, int iColSide )
	{
	}
}

